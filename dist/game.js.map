{
  "version": 3,
  "sources": ["../code/main.js"],
  "sourcesContent": ["/*\nTetraShmup\n\n- shmup where player is tetrominos\n\nhosted @ https://replit.com/@Amuseum/TetraShmup#code/main.js\nplayed @ https://TetraShmup.amuseum.repl.co\n//*/\n\n//import kaboom from \"kaboom\"\n//import Omino from \"./omino.js\"\n\nMath.d2r = function (degrees) {\n   return degrees * Math.PI / 180;\n}\n\nMath.r2d = function (radians) {\n   return radians * 180 / Math.PI;\n}\n\nMath.midpoint = function (a, b) {\n   // find midpoint between self and point\n   let spot = vec2((a.x + b.x) / 2, (a.y + b.y) / 2);\n   return spot;\n}\n\nMath.rotatePoint = function(center, angle, point) {\n   //console.log(center, angle, point);\n   let newPoint = {};\n\n   let sin = Math.sin(Math.d2r(angle));\n   let cos = Math.cos(Math.d2r(angle));\n\n   // translate point back to origin\n   newPoint.x = point.x - center.x;\n   newPoint.y = point.y - center.y;\n\n   // rotate point\n   let newX = newPoint.x * cos - newPoint.y * sin;\n   let newY = newPoint.x * sin + newPoint.y * cos;\n\n   // translate point back\n   newPoint.x = newX + center.x;\n   newPoint.y = newY + center.y;\n   //console.log(newPoint);\n\n   return newPoint;\n}\n\nvar log = console.log;\n\n// Game Parameters\nvar GAME_TITLE = \"OMINOS\";\nvar BLOCK_SIZE = 24;\nvar CELL_SIZE = 12;\nvar MAP_WIDTH = 360;\nvar MAP_HEIGHT = 480;\nvar OMINO_SHAPES = ['t', 'i', 'l', 'j', 'o', 's', 'z'];\nvar OMINO_COLORS = ['red', 'cyan', 'yellow', 'magenta', 'green', 'white'];\nvar DAMAGE_LEVEL = {\n   low: 3,\n   medium: 6,\n   high: 9,\n   veryhigh: 12,\n};\n\nvar direction = {\n   LEFT: 0,\n   UP: 1,\n   RIGHT: 2,\n   DOWN: 3,\n};\n\n// initialize context\nkaboom({\n   background: [0, 0, 0],\n   width: 360,\n   height: 480,\n});\n\nloadRoot(\"sprites/\");\nloadSprite(\"stars\", \"stars.png\");\nloadSprite(\"gem\", \"gem.png\");\nloadSprite(\"spaceship\", \"spaceship.png\");\nloadSprite(\"alien\", \"alien.png\");\nloadSprite(\"wasp\", \"wasp.png\");\nloadSprite(\"asteroid\", \"asteroid.png\");\nloadOminos();\n\nloadRoot(\"sounds/\");\nloadSound(\"shoot\", \"shoot.wav\");\nloadSound(\"score\", \"score.wav\");\nloadSound(\"music\", \"music.mp3\");\nloadSound(\"pandora\", \"pandora.mp3\");\nloadSound(\"explosion\", \"explosion.wav\");\n\nfunction gotHurt(ob, damage) {\n   damage = DAMAGE_LEVEL[damage] || damage;\n   ob.hurt(damage);\n}\n\nfunction loadOminos() {\n   OMINO_SHAPES.forEach((shape) => {\n      OMINO_COLORS.forEach((color) => {\n         loadSprite(`omino_${shape}_${color}`, `omino_${shape}_${color}.png`);\n      });\n   });\n}\n\nfunction createTitle() {\n   // spell out title using ominos\n   // start with base (x, y)\n   // move them relatively for each omino\n   let x = 36;\n   let y = 84;\n\n   // O\n   add([\n         sprite(\"omino_o_red\"),\n         pos(x, y),\n\t\t\t\"o\",\n\t\t\t{\n\t\t\t\tstep: 12\n\t\t\t},\n      ]);\n\n   // M\n   x += 36;\n   y -= 12;\n   add([\n         sprite(\"omino_i_yellow\"),\n         pos(x, y),\n      ]);\n\n   x += 48;\n   add([\n         sprite(\"omino_t_magenta\"),\n         pos(x, y),\n         rotate(90),\n      ]);\n\n   add([\n         sprite(\"omino_i_green\"),\n         pos(x, y),\n      ]);\n\n   // I\n   x += 60;\n   add([\n         sprite(\"omino_t_white\"),\n         pos(x, y),\n         rotate(90),\n      ]);\n\n   x -= 36;\n   y += 48;\n   add([\n         sprite(\"omino_t_red\"),\n         pos(x, y),\n         rotate(-90),\n      ]);\n\n   // N\n   x += 72;\n   y -= 12;\n   add([\n         sprite(\"omino_j_cyan\"),\n         pos(x, y),\n         rotate(180),\n      ]);\n\n   x += 24;\n   add([\n         sprite(\"omino_l_yellow\"),\n         pos(x, y),\n         rotate(180),\n      ]);\n\n   // O\n   x += 12;\n   y -= 24;\n   add([\n         sprite(\"omino_o_magenta\"),\n         pos(x, y),\n\t\t\t\"o\",\n\t\t\t{\n\t\t\t\tstep: 24,\n\t\t\t},\n      ]);\n\n   // S\n   x += 50;\n   y += 12;\n   add([\n         sprite(\"omino_s_green\"),\n         pos(x, y),\n         rotate(-45),\n         origin(\"center\"),\n\t\t\t\"s\"\n      ]);\n}\n\nfunction animateTitle(frame) {\n\tlet obs = 0;\n\tlet dy = (frame % 3) - 1; // [-1, 0, 1]\n\tlog(dy);\n\tevery(\"o\", (ob) => {\n\t\tob.move(0, dy * ob.step);\n\t\tobs++;\n\t});\n\tevery(\"s\", (ob) => {\n\t\tob.angle += 45;\n\t\tobs++;\n\t});\n\n\tif (obs) {\n\t\tsetTimeout(animateTitle, 1000, ++frame);\n\t}\n}\n\nscene(\"title\", () => {\n   createTitle();\n\tsetTimeout(animateTitle, 1000, 2);\n\n   add([\n         text(\" Move:\\n O     D\\n I A   X V\\nE     C\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(MAP_WIDTH / 2, MAP_HEIGHT * 6 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\" Turn:\\n<S N>  <J L>\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(MAP_WIDTH / 2, MAP_HEIGHT * 8 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\"Press ENTER to start\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(MAP_WIDTH / 2, MAP_HEIGHT * 10 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   onKeyRelease(\"enter\", () => {\n      go(\"main\");\n   });\n});\n\ngo(\"title\");\n\nscene(\"main\", () => {\n   layers([\n         \"bg\",\n         \"obj\",\n         \"ui\",\n      ], \"obj\");\n\n   let nBackgrounds = 2;\n   for (let i = 0; i < nBackgrounds; i++) {\n      add([\n            sprite(\"stars\", {\n               width: MAP_WIDTH,\n               height: MAP_HEIGHT\n            }),\n            pos(0, -i * MAP_HEIGHT),\n            layer(\"bg\"),\n            \"bg\", {\n               scrollDelay: 1,\n               scrollX: 0,\n               scrollY: 100,\n               timer: 0,\n            },\n         ]);\n   }\n\n   onUpdate(\"bg\", (bg) => {\n      bg.timer += dt();\n      if (bg.timer >= bg.scrollDelay) {\n         bg.move(bg.scrollX, bg.scrollY);\n      }\n      if (bg.pos.y >= MAP_HEIGHT) {\n         bg.pos.y = -MAP_HEIGHT;\n      }\n   });\n\n   const PLAYER_ANGLE_START = -90;\n   const PLAYER_ANGLE_TURN = 22.5;\n   const PLAYER_START_SHAPE = choose(OMINO_SHAPES);\n   const PLAYER_START_COLOR = choose(OMINO_COLORS);\n\n   function randomizePlayerOmino() {\n      player.shape = choose(OMINO_SHAPES);\n      player.ominocolor = choose(OMINO_COLORS);\n      loadPlayerOmino();\n   }\n\n   function getOminoSprite(shape, color) {\n      return `omino_${shape}_${color}`;\n   }\n\n   function getPlayerCells(player) {\n      player.cells = Omino.getCellPos(player.omino, player.angle, CELL_SIZE);\n   }\n\n   function updatePlayerSprite(spriteName) {\n      player.use(sprite(spriteName));\n      player.use(area());\n   }\n\n   function loadPlayerOmino() {\n      let shape = player.shape;\n      let color = player.ominocolor;\n      let spriteName = getOminoSprite(shape, color);\n\n      updatePlayerSprite(spriteName);\n      player.omino = Omino.Shapes[shape];\n      getPlayerCells(player);\n   }\n\n   const player = add([\n            sprite(getOminoSprite(PLAYER_START_SHAPE, PLAYER_START_COLOR)),\n            pos(MAP_WIDTH / 2, MAP_HEIGHT / 2),\n            z(99),\n            area(),\n            solid(),\n            rotate(PLAYER_ANGLE_START),\n            origin(\"center\"),\n            health(100),\n            \"player\", {\n               score: 0,\n               shootDelay: 0.8,\n               shootTimer: 0,\n\t\t\t\t\tlevel: 0,\n               speed: 200,\n               gems: 0,\n               gemsLimit: 10,\n               shape: PLAYER_START_SHAPE,\n               ominocolor: PLAYER_START_COLOR,\n               touchDamage: 'veryhigh',\n            }\n         ]);\n\n   loadPlayerOmino();\n\n   function playerMoveLeft() {\n      // move left\n      player.move(Math.min(-player.speed / 2, Math.cos(Math.d2r(player.angle)) * player.speed), 0);\n      if (player.pos.x < 0) {\n         player.pos.x = 0;\n      }\n   }\n\n   function playerMoveRight() {\n      // move right\n      player.move(Math.max(player.speed / 2, Math.cos(Math.d2r(-player.angle)) * player.speed), 0);\n      if (player.pos.x > MAP_WIDTH) {\n         player.pos.x = MAP_WIDTH;\n      }\n   }\n\n   function playerMoveUp() {\n      player.move(0, Math.min(-player.speed / 2, Math.sin(Math.d2r(player.angle)) * player.speed));\n      if (player.pos.y < 0) {\n         player.pos.y = 0;\n      }\n   }\n\n   function playerMoveDown() {\n      player.move(0, Math.max(player.speed / 2, Math.sin(Math.d2r(-player.angle - 180)) * player.speed));\n      if (player.pos.y > MAP_HEIGHT) {\n         player.pos.y = MAP_HEIGHT;\n      }\n   }\n\n   function playerTurnLeft() {\n      player.angle -= PLAYER_ANGLE_TURN;\n      getPlayerCells(player);\n   };\n\n   function playerTurnRight() {\n      player.angle += PLAYER_ANGLE_TURN;\n      getPlayerCells(player);\n   };\n\n   // BEAKL\n   onKeyDown(\"i\", playerMoveLeft);\n\n   onKeyDown(\"a\", playerMoveRight);\n\n   onKeyDown(\"o\", playerMoveUp);\n\n   onKeyDown(\"e\", playerMoveDown);\n\n   onKeyPress(\"s\", playerTurnLeft);\n\n   onKeyPress(\"n\", playerTurnRight);\n\n   // SHITTY\n   onKeyDown(\"x\", playerMoveLeft);\n\n   onKeyDown(\"v\", playerMoveRight);\n\n   onKeyDown(\"d\", playerMoveUp);\n\n   onKeyDown(\"c\", playerMoveDown);\n\n   onKeyPress(\"j\", playerTurnLeft);\n\n   onKeyPress(\"l\", playerTurnRight);\n\n   const BULLET_SPEED = BLOCK_SIZE * 5;\n   const LASER_SPEED = BLOCK_SIZE * 8;\n   const MISSILE_SPEED = BLOCK_SIZE * 6;\n   const FALLING_SPEED = BLOCK_SIZE * 4;\n   const EXHAUST_SPEED = BLOCK_SIZE;\n\n   function spawnPlayerExhaust(cells) {\n      // particles behind player, to denote movement direction\n      // moves in opposite direction of player\n      let angle = player.angle + 180;\n\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x + Math.cos(Math.d2r(angle)) * 12 * player.omino.cols / 2;\n         let y = player.pos.y + cell.y + Math.sin(Math.d2r(angle)) * 12 * player.omino.rows / 2;\n         add([\n               pos(x, y),\n               rect(1, 1),\n               scale(3),\n               color(0, 255, 255),\n               rotate(angle),\n               opacity(1),\n               \"exhaust\", {\n                  speedX: rand(Math.cos(Math.d2r(angle)) * EXHAUST_SPEED),\n                  speedY: rand(Math.sin(Math.d2r(angle)) * EXHAUST_SPEED),\n                  destroyDelay: 0.25,\n                  destroyTimer: 0,\n               }\n            ]);\n      });\n   }\n\n   player.onUpdate(() => {\n      let deltaTime = dt();\n      player.shootTimer += deltaTime;\n      player.shapeChangeTimer += deltaTime;\n      if (player.shootTimer >= player.shootDelay) {\n         if (player.cells) {\n            playerShootsLogic(player.cells);\n         }\n\n         player.shootTimer = 0;\n      }\n\n      spawnPlayerExhaust(player.cells);\n   });\n\n   onUpdate(\"exhaust\", (ob) => {\n      ob.use(opacity(ob.opacity - 0.075));\n      //if (chance(0.75)) {\n      ob.move(ob.speedX, ob.speedY);\n      //}\n      ob.destroyTimer += dt();\n      if (ob.destroyTimer >= ob.destroyDelay) {\n         destroy(ob);\n      }\n   });\n\n   function playerShootsLogic(cells) {\n      switch (player.ominocolor) {\n      case 'cyan':\n         playerShootsLasers(cells);\n         break;\n\n      case 'yellow':\n         playerShootsMissiles();\n         break;\n\n      case 'magenta':\n         playerShootsField(cells);\n         break;\n\n      case 'green':\n         playerShootsBouncer(cells);\n         break;\n\n      case 'white':\n         playerShootsFalling();\n         break;\n\n      case 'red':\n      default:\n         playerShootsBullets(cells);\n         break;\n      }\n   }\n\n   function playerShootsBullets(cells) {\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n         let spot = vec2(x, y);\n         spawnBullet(spot);\n      });\n   }\n\n   function spawnBullet(spot) {\n      add([\n            pos(spot),\n            circle(BLOCK_SIZE / 4),\n            origin(\"center\"),\n            color(255, 0, 0),\n            area({\n               width: 8,\n               height: 8\n            }),\n            cleanup(),\n            \"playerattack\",\n            \"bullet\", {\n               speedX: Math.cos(Math.d2r(player.angle)) * BULLET_SPEED,\n               speedY: Math.sin(Math.d2r(player.angle)) * BULLET_SPEED,\n               damage: 'low',\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   onUpdate(\"bullet\", (b) => {\n      b.move(b.speedX, b.speedY);\n   });\n\n   function playerShootsLasers(cells) {\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n\t\t\tlet spot = Math.rotatePoint({x:x, y:y}, player.angle, {x:x + BLOCK_SIZE, y:y});\n         spawnLaser(spot);\n      });\n   }\n\n   function spawnLaser(spot) {\n      let laser = add([\n\t\t\tpos(spot.x, spot.y),\n\t\t\trect(BLOCK_SIZE * 2, player.level + 1),\n\t\t\trotate(player.angle),\n\t\t\t//origin(\"center\"),\n\t\t\tcolor(0, 255, 255),\n\t\t\tarea(),\n\t\t\tcleanup(),\n\t\t\t\"playerattack\",\n\t\t\t\"laser\", {\n\t\t\t\tspeedX: Math.cos(Math.d2r(player.angle)) * LASER_SPEED,\n\t\t\t\tspeedY: Math.sin(Math.d2r(player.angle)) * LASER_SPEED,\n\t\t\t\tdamage: 'low',\n\t\t\t}\n\t\t]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   onUpdate(\"laser\", (b) => {\n      b.move(b.speedX, b.speedY);\n   });\n\n   function playerShootsMissiles() {\n      let x = player.pos.x;\n      let y = player.pos.y;\n      let pos = vec2(x, y);\n      spawnMissile(pos);\n   }\n\n   function spawnMissile(spot) {\n      add([\n            pos(spot),\n            sprite(getOminoSprite(player.shape, player.ominocolor)),\n            origin(\"center\"),\n            rotate(player.angle),\n            scale(0.5),\n            area(),\n            cleanup(),\n            \"playerattack\",\n            \"missile\", {\n               speedX: Math.cos(Math.d2r(player.angle)) * MISSILE_SPEED,\n               speedY: Math.sin(Math.d2r(player.angle)) * MISSILE_SPEED,\n               damage: 'medium',\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   onUpdate(\"missile\", (b) => {\n      b.move(b.speedX, b.speedY);\n   });\n\n   function spawnBomb(spot) {\n      add([\n            pos(spot),\n            circle(BLOCK_SIZE),\n            origin(\"center\"),\n            area({\n               width: BLOCK_SIZE * 2,\n               height: BLOCK_SIZE * 2\n            }),\n            color(Color.YELLOW),\n            cleanup(),\n            \"playerattack\",\n            \"bomb\", {\n               damage: 'veryhigh',\n               destroyDelay: 0.5,\n               destroyTimer: 0,\n            }\n         ]);\n   }\n\n   onUpdate(\"bomb\", (bomb) => {\n      bomb.destroyTimer += dt();\n      if (bomb.destroyTimer >= bomb.destroyDelay) {\n         destroy(bomb);\n      }\n   });\n\n   function playerShootsField(cells) {\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n         let spot = vec2(x, y);\n         spawnField(spot);\n      });\n   }\n\n   function spawnField(spot) {\n      add([\n            pos(spot),\n            circle(BLOCK_SIZE * 1.5),\n            origin(\"center\"),\n            color(255, 0, 0),\n            area({\n               width: BLOCK_SIZE * 3,\n               height: BLOCK_SIZE * 3,\n            }),\n            cleanup(),\n            \"playerattack\",\n            \"field\", {\n               damage: 'veryhigh',\n               destroyDelay: 0.1,\n               destroyTimer: 0,\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   onUpdate(\"field\", (field) => {\n      field.destroyTimer += dt();\n      if (field.destroyTimer >= field.destroyDelay) {\n         destroy(field);\n      }\n   });\n\n   function playerShootsBouncer(cells) {\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n         let spot = vec2(x, y);\n         spawnBouncer(spot);\n      });\n   }\n\n   function spawnBouncer(spot) {\n      add([\n            pos(spot),\n            circle(BLOCK_SIZE / 8),\n            origin(\"center\"),\n            color(Color.GREEN),\n            area({\n               width: BLOCK_SIZE / 2,\n               height: BLOCK_SIZE / 2,\n            }),\n            cleanup(),\n            \"playerattack\",\n            \"bouncer\", {\n               speedX: Math.cos(Math.d2r(player.angle)) * BULLET_SPEED,\n               speedY: Math.sin(Math.d2r(player.angle)) * BULLET_SPEED,\n               damage: 'low',\n               destroyDelay: 5,\n               destroyTimer: 0,\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   onUpdate(\"bouncer\", (bouncer) => {\n      bouncer.destroyTimer += dt();\n      if (bouncer.destroyTimer >= bouncer.destroyDelay) {\n         destroy(bouncer);\n         return;\n      }\n      bouncer.move(bouncer.speedX, bouncer.speedY);\n      if (bouncer.pos.x < 0) {\n         bouncer.pos.x = -bouncer.pos.x * 2;\n         bouncer.speedX *= -1;\n      }\n      if (bouncer.pos.x > MAP_WIDTH) {\n         bouncer.pos.x -= (bouncer.pos.x - MAP_WIDTH) * 2;\n         bouncer.speedX *= -1;\n      }\n      if (bouncer.pos.y < 0) {\n         bouncer.pos.y = -bouncer.pos.y * 2;\n         bouncer.speedY *= -1;\n      }\n      if (bouncer.pos.y > MAP_HEIGHT) {\n         bouncer.pos.y -= (bouncer.pos.y - MAP_HEIGHT) * 2;\n         bouncer.speedY *= -1;\n      }\n   });\n\n   function playerShootsFalling() {\n      let x = player.pos.x;\n      let y = BLOCK_SIZE;\n      let pos = vec2(x, y);\n      spawnFalling(pos);\n   }\n\n   function spawnFalling(spot) {\n      add([\n            pos(spot),\n            sprite(getOminoSprite(player.shape, choose(OMINO_COLORS))),\n            origin(\"center\"),\n            rotate(player.angle),\n            scale(0.5),\n            area(),\n            cleanup(),\n            \"playerattack\",\n            \"falling\", {\n               speedX: 0,\n               speedY: FALLING_SPEED,\n               damage: 'high',\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   onUpdate(\"falling\", (b) => {\n      b.move(b.speedX, b.speedY);\n   });\n\n   function spawnAlienBullet(spot) {\n      add([\n            pos(spot),\n            circle(4),\n            origin(\"center\"),\n            color(255, 128, 0),\n            area({\n               width: 8,\n               height: 8\n            }),\n            cleanup(),\n            \"alienbullet\", {\n               speedX: Math.cos(Math.atan2(player.pos.y - spot.y, player.pos.x - spot.x)) * BULLET_SPEED,\n               speedY: Math.sin(Math.atan2(player.pos.y - spot.y, player.pos.x - spot.x)) * BULLET_SPEED,\n               damage: 'medium',\n            }\n         ]);\n   }\n\n   onUpdate(\"alienbullet\", (attack) => {\n      attack.move(attack.speedX, attack.speedY);\n   });\n\n   player.onCollide(\"alienbullet\", (attack) => {\n      gotHurt(player, attack.damage);\n      destroy(attack);\n      makeExplosion(player.pos, 3, 3, 3, Color.YELLOW);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   function spawnAlienLaser(spot) {\n      let angle = Math.atan2(player.pos.y - spot.y, player.pos.x - spot.x);\n      add([\n            pos(spot),\n            rect(BLOCK_SIZE * 2, 1),\n            rotate(Math.r2d(angle)),\n            origin(\"center\"),\n            color(255, 128, 0),\n            area(),\n            cleanup(),\n            \"alienlaser\", {\n               speedX: Math.cos(angle) * LASER_SPEED,\n               speedY: Math.sin(angle) * LASER_SPEED,\n               damage: 'low',\n            }\n         ]);\n   }\n\n   onUpdate(\"alienlaser\", (attack) => {\n      attack.move(attack.speedX, attack.speedY);\n   });\n\n   player.onCollide(\"alienlaser\", (attack) => {\n      gotHurt(player, attack.damage);\n      makeExplosion(player.pos, 3, 3, 3, Color.YELLOW);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   const ALIEN_BASE_SPEED = 100;\n   const ALIEN_SPEED_INC = 20;\n   const POINTS_ALIEN_STRONGER = 1000;\n\n   function spawnAlienSpider() {\n      let alienDirection = choose([direction.LEFT, direction.RIGHT]);\n      let xpos = (alienDirection == direction.LEFT ? 0 : MAP_WIDTH - 22);\n\n      const points_speed_up = Math.floor(player.score / POINTS_ALIEN_STRONGER);\n      const alienSpeed = ALIEN_BASE_SPEED + (points_speed_up * ALIEN_SPEED_INC);\n      const newAlienInterval = 2.0 - (points_speed_up / 6.18);\n      let angle = alienDirection == direction.LEFT ? rand(45, -45) : rand(-135, -225);\n\n      add([\n            sprite(\"alien\"),\n            pos(xpos, rand(0, MAP_HEIGHT - 30)),\n            area(),\n            origin(\"center\"),\n            rotate(angle + 90),\n            cleanup(),\n            health(9),\n            \"alien\", {\n               speedX: Math.cos(Math.d2r(angle)) * alienSpeed,\n               speedY: Math.sin(Math.d2r(angle)) * alienSpeed,\n               shootChance: 0.005,\n               touchDamage: 'veryhigh',\n               bulletDamage: 'high',\n               points: 10,\n            },\n         ]);\n\n      wait(newAlienInterval, spawnAlienSpider);\n   }\n\n   spawnAlienSpider();\n\n   function spawnAlienWasp() {\n      let xpos = choose([0, MAP_WIDTH]);\n      let ypos = choose([0, MAP_HEIGHT]);\n      let angle = xpos == MAP_WIDTH ? 135 : 45;\n      angle *= ypos == MAP_HEIGHT ? -1 : 1;\n      add([\n            sprite(\"wasp\"),\n            pos(xpos, ypos),\n            area(),\n            origin(\"center\"),\n            rotate(angle),\n            cleanup(),\n            health(18),\n            \"wasp\",\n            \"alien\", {\n               shootChance: 0.025,\n               bulletDamage: 'high',\n               touchDamage: 'veryhigh',\n               points: 20,\n               speed: ALIEN_BASE_SPEED, // wavelength\n               amplitude: 3, // delta pixels\n               frequency: 45, // times / seconds\n               timer: 0,\n            },\n         ]);\n   }\n\n   wait(rand(6, 12), spawnAlienWasp);\n\n   onUpdate(\"wasp\", (wasp) => {\n      // move like sine wave\n      wasp.timer += dt();\n      let cos = Math.cos(Math.d2r(wasp.angle));\n      let sin = Math.sin(Math.d2r(wasp.angle));\n      let wobble = wasp.amplitude * Math.cos(wasp.frequency * wasp.timer) * wasp.frequency;\n      let dx = cos * wasp.speed - sin * wobble;\n      let dy = sin * wasp.speed + cos * wobble;\n      wasp.move(dx, dy);\n   });\n\n   const CHANCE_SPAWN_ALIENSHOOTER = 0.0025;\n\n   function spawnAlienShooters() {\n      // create 3 enemies from left or right edges\n      // V formation, shooting lasers\n      let alienDirection = choose([direction.LEFT, direction.RIGHT]);\n      let spriteSize = 40;\n      let xpos = [\n         (alienDirection == direction.LEFT ? -spriteSize / 2 : MAP_WIDTH + spriteSize / 2),\n         (alienDirection == direction.LEFT ? 0 : MAP_WIDTH),\n         (alienDirection == direction.LEFT ? -spriteSize / 2 : MAP_WIDTH + spriteSize / 2),\n      ];\n      let ypos = rand(spriteSize, MAP_HEIGHT - spriteSize * 3);\n\n      let angle = alienDirection == direction.LEFT ? 0 : 180;\n\n      for (let i = 0; i < 3; i++) {\n         add([\n               sprite(\"spaceship\"),\n               pos(xpos[i], ypos + i * spriteSize),\n               area(),\n               origin(\"center\"),\n               rotate(angle),\n               cleanup(),\n               health(18),\n               \"alienshooter\",\n               \"alien\", {\n                  speedX: (alienDirection == direction.LEFT ? spriteSize : -spriteSize) / 2,\n                  speedY: 0,\n                  shootChance: 0.02,\n                  touchDamage: 'veryhigh',\n                  points: 30,\n                  destroyX: alienDirection == direction.LEFT ? MAP_WIDTH : 0,\n               },\n            ]);\n      }\n   }\n\n   onUpdate(\"alienshooter\", (alien) => {\n      alien.move(alien.speedX, alien.speedY);\n      if (alien.destroyX) {\n         if (alien.destroyX <= alien.pos.x) {\n            destroy(alien);\n         }\n      } else if (0 >= alien.pos.x) {\n         destroy(alien);\n      }\n      if (chance(alien.shootChance)) {\n         spawnAlienLaser(alien.pos);\n      }\n   });\n\n   const CHANCE_ELITE_SPAWN_UP = 0.5;\n\n   function spawnAlienElite() {\n      let bUp = chance(CHANCE_ELITE_SPAWN_UP);\n      let y = bUp ? 0 : MAP_HEIGHT;\n      let moveDirection = bUp ? direction.DOWN : direction.UP;\n      let speedY = (BLOCK_SIZE / 2) * (moveDirection - 2);\n      add([\n            sprite(\"alien\"),\n            pos(rand(BLOCK_SIZE * 2, MAP_WIDTH - BLOCK_SIZE * 2), y),\n            scale(4),\n            area(),\n            origin(\"center\"),\n            cleanup(),\n            health(90),\n            \"elite\",\n            \"alien\", {\n               speedX: 0,\n               speedY: speedY,\n               shootChance: 0.0625,\n               touchDamage: 'veryhigh',\n               bulletDamage: 'high',\n               points: 240,\n            },\n         ]);\n   }\n\n   wait(rand(10, 10), spawnAlienElite);\n\n   onUpdate(\"alien\", (alien) => {\n      alien.move(alien.speedX, alien.speedY);\n      if (alien.bulletDamage && chance(alien.shootChance)) {\n         spawnAlienBullet(alien.pos);\n      }\n   });\n\n   onCollide(\"alien\", \"bullet\", (alien, attacker) => {\n      makeExplosion(Math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      destroy(attacker);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"laser\", (alien, attacker) => {\n      makeExplosion(Math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"missile\", (alien, attacker) => {\n      makeExplosion(Math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      spawnBomb(attacker.pos);\n      destroy(attacker);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"bomb\", (alien, attacker) => {\n      makeExplosion(Math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.YELLOW);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"field\", (alien, attacker) => {\n      makeExplosion(Math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"bouncer\", (alien, attacker) => {\n      makeExplosion(Math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.CYAN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"falling\", (alien, attacker) => {\n      makeExplosion(Math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   on(\"hurt\", \"alien\", (alien) => {\n      if (alien.hp() <= 0) {\n         updateScore(alien.points);\n         destroy(alien);\n      }\n   });\n\n   on(\"destroy\", \"elite\", (alien) => {\n      wait(rand(12, 24), spawnAlienElite);\n   });\n\n   on(\"destroy\", \"wasp\", (alien) => {\n      wait(rand(6, 12), spawnAlienWasp);\n   });\n\n   add([\n         text(\"SCORE: \", {\n            size: 8,\n            font: \"sink\"\n         }),\n         pos(24, 10),\n         layer(\"ui\"),\n      ]);\n\n   const scoreText = add([\n            text(\"000000\", {\n               size: 8,\n               font: \"sink\"\n            }),\n            pos(72, 10),\n            layer(\"ui\"),\n         ]);\n\n\tfunction updatePlayerLevel() {\n\t\tif (player.level < Math.floor(player.score / 1000)) {\n\t\t\tplayer.level++;\n\t\t\tplayer.shootDelay *= 0.9;\n\t\t}\n\t}\n\n   function updateScore(points) {\n      player.score += points;\n      scoreText.text = player.score.toString().padStart(6, 0);\n      play(\"score\", {\n         volume: 0.05,\n         detune: rand(-1200, 1000),\n      });\n\n\t\tupdatePlayerLevel();\n   }\n\n   add([\n         text(\"SHIELD\", {\n            size: 8,\n            font: \"sink\"\n         }),\n         pos(174, 10),\n         layer(\"ui\"),\n      ]);\n\n   // health bar border\n   add([\n         rect(54, 14),\n         pos(214, 6),\n         color(100, 100, 100),\n         layer(\"ui\"),\n      ]);\n\n   // health bar background\n   add([\n         rect(50, 10),\n         pos(216, 8),\n         color(0, 0, 0),\n         layer(\"ui\"),\n      ]);\n\n   // health bar filling\n   const healthBar = add([\n            rect(50, 10),\n            pos(216, 8),\n            color(0, 255, 0),\n            layer(\"ui\"),\n         ]);\n\n   function updatePlayerHealth() {\n      player.setHP(Math.max(player.hp(), 0));\n      player.setHP(Math.min(player.hp(), 100));\n\n      healthBar.width = 50 * (player.hp() / 100);\n\n      if (player.hp() <= 25) {\n         healthBar.color = rgb(255, 0, 0);\n      } else if (player.hp() <= 50) {\n         healthBar.color = rgb(255, 127, 0);\n      } else if (player.hp() < 100) {\n         healthBar.color = rgb(255, 255, 0);\n      } else {\n         healthBar.color = rgb(0, 255, 0);\n      }\n\n      if (player.hp() <= 0) {\n         destroy(player);\n         for (let i = 0; i < 500; i++) {\n            wait(0.01 * i, () => {\n               makeExplosion(vec2(rand(0, MAP_WIDTH), rand(0, MAP_HEIGHT)), 5, 5, 5, Color.RED);\n               play(\"explosion\", {\n                  volume: 0.125,\n                  detune: rand(-1200, 1200)\n               });\n            });\n         }\n         wait(2, () => {\n            go(\"endGame\", player.score);\n         });\n      }\n   }\n\n   player.onHurt(updatePlayerHealth);\n   player.onHeal(updatePlayerHealth);\n\n   player.onCollide(\"alien\", (alien) => {\n      shake(5);\n      makeExplosion(alien.pos, 4, 4, 4, Color.RED);\n      play(\"explosion\", {\n         detune: -1200,\n         volume: 0.0375,\n      });\n      gotHurt(player, alien.touchDamage);\n      gotHurt(alien, player.touchDamage);\n   });\n\n   function spawnGem() {\n      let xpos = rand(BLOCK_SIZE, MAP_WIDTH - BLOCK_SIZE);\n      add([\n            sprite(\"gem\"),\n            pos(rand(BLOCK_SIZE, MAP_WIDTH - BLOCK_SIZE), rand(BLOCK_SIZE, MAP_HEIGHT - BLOCK_SIZE)),\n            area(),\n            \"gem\", {\n               spawnDelay: rand(2, 6),\n               points: 100,\n               life: 'medium',\n            },\n         ]);\n   }\n\n   wait(rand(2, 6), spawnGem);\n   wait(rand(2, 6), spawnGem);\n\n   player.onCollide(\"gem\", (gem) => {\n      destroy(gem);\n      updateScore(gem.points);\n      player.heal(DAMAGE_LEVEL[gem.life]);\n      wait(gem.spawnDelay, spawnGem);\n      playerGemsBoost();\n      randomizePlayerOmino();\n   });\n\n   function playerGemsBoost() {\n      player.gems++;\n      if (player.gems >= player.gemsLimit) {\n         player.speed += ALIEN_SPEED_INC;\n         player.gems = 0;\n      }\n   }\n\n   // random obstacles, of random size and speed\n   const CHANCE_SPAWN_OBSTACLES = 0.001;\n   const MAX_OBSTACLES_W = 5;\n   const MAX_OBSTACLES_H = 3;\n\n   function spawnObstacles() {\n      let bUp = chance(0.5);\n      let y = bUp ? 0 : MAP_HEIGHT;\n      let moveDirection = bUp ? direction.DOWN : direction.UP;\n      let speedY = (BLOCK_SIZE) * (moveDirection - 2);\n      let x = rand(MAP_WIDTH - BLOCK_SIZE * MAX_OBSTACLES_W);\n      for (let i = MAX_OBSTACLES_W; i; i--) {\n         for (let j = MAX_OBSTACLES_H; j; j--) {\n            if (!chance(0.33)) {\n               continue;\n            }\n            add([\n                  sprite(\"asteroid\"),\n                  pos(x + i * BLOCK_SIZE, -j * BLOCK_SIZE),\n                  origin(\"center\"),\n                  area(),\n                  solid(),\n                  health(24),\n                  \"obstacle\", {\n                     speedX: 0,\n                     speedY: BLOCK_SIZE / 2,\n                     touchDamage: 'medium',\n                     points: 2,\n                  }\n               ]);\n         }\n      }\n   }\n   onUpdate(() => {\n      if (chance(CHANCE_SPAWN_OBSTACLES)) {\n         spawnObstacles();\n      }\n      if (chance(CHANCE_SPAWN_ALIENSHOOTER)) {\n         spawnAlienShooters();\n      }\n   });\n\n   onUpdate(\"obstacle\", (ob) => {\n      ob.move(ob.speedX, ob.speedY);\n      if (ob.pos.y > MAP_HEIGHT) {\n         destroy(ob);\n      }\n   });\n\n   player.onCollide(\"obstacle\", (ob) => {\n      gotHurt(player, ob.touchDamage);\n      gotHurt(ob, ob.touchDamage);\n      makeExplosion(Math.midpoint(ob.pos, player.pos), 4, 4, 4, Color.RED);\n      play(\"explosion\", {\n         detune: -1200,\n         volume: 0.0375,\n      });\n   });\n\n   onCollide(\"obstacle\", \"playerattack\", (ob, attack) => {\n      gotHurt(ob, attack.damage);\n      if (attack.is('missile')) {\n         destroy(attack);\n         spawnBomb(Math.midpoint(attack.pos, ob.pos));\n      }\n      if (attack.is('bomb') || attack.is('bullet')) {\n         destroy(attack);\n      }\n   });\n\n   on(\"hurt\", \"obstacle\", (ob) => {\n      if (0 >= ob.hp()) {\n         destroy(ob);\n         updateScore(ob.points);\n      }\n   });\n});\n\nfunction makeExplosion(p, n, rad, size, colour = Color.YELLOW) {\n   for (let i = 0; i < n; i++) {\n      wait(rand(n * 0.1), () => {\n         for (let i = 0; i < 2; i++) {\n            add([\n                  pos(p.add(rand(vec2(-rad), vec2(rad)))),\n                  circle(1, 1),\n                  color(colour),\n                  outline({\n                     width: size / 2,\n                     color: Color.BLACK\n                  }),\n                  origin(\"center\"),\n                  scale(1, 1),\n                  grow(rand(48, 72) * size),\n                  lifespan(0.1),\n               ]);\n         }\n      });\n   }\n}\n\nfunction grow(rate) {\n   return {\n      update() {\n         const n = rate * dt();\n         this.scale.x += n;\n         this.scale.y += n;\n      },\n   };\n}\n\nscene(\"endGame\", (score) => {\n   add([\n         text(\"GAME OVER\", {\n            size: 40,\n            font: \"sink\"\n         }),\n         pos(MAP_WIDTH / 2, MAP_HEIGHT / 3),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\" SCORE:\\n\" + score, {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(MAP_WIDTH / 2, MAP_HEIGHT / 2),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\"Press ENTER to start\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(MAP_WIDTH / 2, MAP_HEIGHT * 10 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   onKeyRelease(\"enter\", () => {\n      go(\"main\");\n   });\n});\n\nconst music = play(\"pandora\", {\n      volume: 0.125,\n      loop: true,\n   });"],
  "mappings": "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",
  "names": ["color", "player", "pos", "i"]
}
