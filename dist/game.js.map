{
  "version": 3,
  "sources": ["../code/const.js", "../code/math.js", "../code/omino.js", "../code/scene_title.js", "../code/scene_main.js", "../code/scene_gameover.js", "../code/main.js"],
  "sourcesContent": ["// Game Parameters\nlet Const = {\n   \"mapW\": 360,\n   \"mapH\": 480,\n   \"gameTitle\": \"OMINOS\",\n\n   \"blockSize\": 24,\n   \"cellSize\": 12,\n   \"ominoShapes\": ['t', 'i', 'l', 'j', 'o', 's', 'z'],\n   \"ominoColors\": ['red', 'cyan', 'yellow', 'magenta', 'green', 'white', 'blue', 'black'],\n   \"damageLevel\": {\n      low: 4,\n      medium: 8,\n      high: 12,\n      veryhigh: 16,\n      extreme: 24,\n   },\n   \"direction\": {\n      LEFT: 0,\n      UP: 1,\n      RIGHT: 2,\n      DOWN: 3,\n   },\n   \"playlist\": [\n      \"alone_against_enemy\",\n      \"brave_pilots\",\n      \"epic_end\",\n      \"rain_of_lasers\",\n      \"without_fear\",\n   ],\n   \"playerMaxLife\": 144,\n   \"playerMaxLevel\": 20,\n   \"playerMaxSpeed\": 600,\n   \"playerStartScore\": 0,\n   \"playerStartAngle\": -90,\n   \"playerAngleTurn\": 22.5,\n   \"playerShootLevelMultiplier\": 0.95,\n   \"playerStartSpeed\": 200,\n   \"playerStartLevel\": 0,\n};\n\nConst.playerStartShape = choose(Const.ominoShapes);\nConst.playerStartColor = choose(Const.ominoColors);\n\n// debug\nif (window.bOminosDebug) {\n   Const.playerStartColor = 'blue';\n   Const.playerStartLevel = 0;\n}\n\nConst.nDirs = Object.keys(Const.direction).length;\n\nfunction choose(arr) {\n   return arr[Math.floor(arr.length * Math.random())];\n}\n\nexport default Const", "let math = {};\n\nmath.d2r = function(degrees) {\n   return degrees * Math.PI / 180;\n}\n\nmath.r2d = function(radians) {\n   return radians * 180 / Math.PI;\n}\n\nmath.midpoint = function(a, b) {\n   // find midpoint between self and point\n   let spot = vec2((a.x + b.x) / 2, (a.y + b.y) / 2);\n   return spot;\n}\n\nmath.rotatePoint = function(center, angle, point) {\n   //console.log(center, angle, point);\n   let newPoint = {};\n\n   let sin = Math.sin(math.d2r(angle));\n   let cos = Math.cos(math.d2r(angle));\n\n   // translate point back to origin\n   newPoint.x = point.x - center.x;\n   newPoint.y = point.y - center.y;\n\n   // rotate point\n   let newX = newPoint.x * cos - newPoint.y * sin;\n   let newY = newPoint.x * sin + newPoint.y * cos;\n\n   // translate point back\n   newPoint.x = newX + center.x;\n   newPoint.y = newY + center.y;\n   //console.log(newPoint);\n\n   return newPoint;\n}\n\nexport default math", "/*\nOmino class\n\n- class for tetrominos\n\nhosted @ https://replit.com/@Amuseum/TetraShmup#code/main.js\nplayed @ https://TetraShmup.amuseum.repl.co\n//*/\n\nimport math from \"./math.js\"\n\nexport default class Omino {\n    static Shapes = {\n        // I\n        \"i\": {\n            rows: 4,\n            cols: 1,\n            grid: '1111'\n        },\n\n        // S\n        \"s\": {\n            rows: 2,\n            cols: 3,\n            grid: '011110'\n        },\n\n        // Z\n        \"z\": {\n            rows: 2,\n            cols: 3,\n            grid: '110011'\n        },\n\n        // L\n        \"l\": {\n            rows: 3,\n            cols: 2,\n            grid: '101011'\n        },\n\n        // J\n        \"j\": {\n            rows: 3,\n            cols: 2,\n            grid: '010111'\n        },\n\n        // T\n        \"t\": {\n            rows: 3,\n            cols: 2,\n            grid: '101110'\n        },\n\n        // O\n        \"o\": {\n            rows: 2,\n            cols: 2,\n            grid: '1111'\n        },\n    };\n\n    static getCellPos = function(shape, angle, radius) {\n        // get every cell's (x, y)\n        // consider angle of rotation and size (radius)\n        let cells = [];\n        let grid = shape.grid;\n        let rows = shape.rows;\n        let cols = shape.cols;\n        let midpoint = {\n            x: radius * cols / 2,\n            y: radius * rows / 2\n        };\n        let id = 0;\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < cols; c++) {\n                let on = grid.substring(id, id + 1);\n                if (on == '1') {\n                    let point = math.rotatePoint({\n                        x: 0,\n                        y: 0\n                    }, angle, {\n                        x: radius * (c + 0.5) - midpoint.x,\n                        y: radius * (r + 0.5) - midpoint.y\n                    });\n                    cells.push(point);\n                }\n                id++;\n            }\n        }\n        return cells;\n    };\n}", "import Const from \"./const.js\"\n\nfunction createTitle() {\n   // spell out title using ominos\n   // start with base (x, y)\n   // move them relatively for each omino\n   let x = 36;\n   let y = 84;\n\n   // O\n   add([\n         sprite(\"omino_o_red\"),\n         pos(x, y),\n\t\t\t\"o\",\n\t\t\t{\n\t\t\t\tstep: 12\n\t\t\t},\n      ]);\n\n   // M\n   x += 36;\n   y -= 12;\n   add([\n         sprite(\"omino_i_yellow\"),\n         pos(x, y),\n      ]);\n\n   x += 48;\n   add([\n         sprite(\"omino_t_magenta\"),\n         pos(x, y),\n         rotate(90),\n      ]);\n\n   add([\n         sprite(\"omino_i_green\"),\n         pos(x, y),\n      ]);\n\n   // I\n   x += 60;\n   add([\n         sprite(\"omino_t_white\"),\n         pos(x, y),\n         rotate(90),\n      ]);\n\n   x -= 36;\n   y += 48;\n   add([\n         sprite(\"omino_t_red\"),\n         pos(x, y),\n         rotate(-90),\n      ]);\n\n   // N\n   x += 72;\n   y -= 12;\n   add([\n         sprite(\"omino_j_cyan\"),\n         pos(x, y),\n         rotate(180),\n      ]);\n\n   x += 24;\n   add([\n         sprite(\"omino_l_yellow\"),\n         pos(x, y),\n         rotate(180),\n      ]);\n\n   // O\n   x += 12;\n   y -= 24;\n   add([\n         sprite(\"omino_o_magenta\"),\n         pos(x, y),\n\t\t\t\"o\",\n\t\t\t{\n\t\t\t\tstep: 24,\n\t\t\t},\n      ]);\n\n   // S\n   x += 50;\n   y += 12;\n   add([\n         sprite(\"omino_s_green\"),\n         pos(x, y),\n         rotate(-45),\n         origin(\"center\"),\n\t\t\t\"s\"\n      ]);\n}\n\nfunction animateTitle(frame) {\n\tlet obs = 0;\n\tlet dy = (frame % 3) - 1; // [-1, 0, 1]\n\tevery(\"o\", (ob) => {\n\t\tob.move(0, dy * ob.step);\n\t\tobs++;\n\t});\n\tevery(\"s\", (ob) => {\n\t\tob.angle += 45;\n\t\tobs++;\n\t});\n\n\tif (obs) {\n\t\tsetTimeout(animateTitle, 1000, ++frame);\n\t}\n}\n\nfunction runScene() {\n   createTitle();\n\tsetTimeout(animateTitle, 1000, 2);\n\n   add([\n         text(\" Move:\\n O     D\\n I A   X V\\nE     C\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(Const.mapW / 2, Const.mapH * 6 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\" Turn:\\n<S T>  <, .>\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(Const.mapW / 2, Const.mapH * 8 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\"Press ENTER to start\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(Const.mapW / 2, Const.mapH * 10 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   onKeyRelease(\"enter\", () => {\n      go(\"main\");\n   });\n}\n\nexport {createTitle, animateTitle, runScene}", "import Const from \"./const.js\"\nimport math from \"./math.js\"\nimport Omino from \"./omino.js\"\n\nlet log = console.log;\n\nfunction runScene() {\n   // play bg music\n   const music = play(choose(Const.playlist), {\n         volume: 0.125,\n         loop: true,\n      });\n\n   layers([\n         \"bg\",\n         \"obj\",\n         \"ui\",\n      ], \"obj\");\n\n   let nBackgrounds = 2;\n   for (let i = 0; i < nBackgrounds; i++) {\n      add([\n            sprite(\"stars\", {\n               width: Const.mapW,\n               height: Const.mapH\n            }),\n            pos(0, -i * Const.mapH),\n            layer(\"bg\"),\n            move(90, Const.mapH / 12),\n            \"bg\", {},\n         ]);\n   }\n\n   onUpdate(\"bg\", (bg) => {\n      if (bg.pos.y >= Const.mapH) {\n         bg.pos.y = -Const.mapH;\n      }\n   });\n\n   function gotHurt(ob, damage) {\n      damage = Const.damageLevel[damage] || damage;\n      ob.hurt(damage);\n   }\n\n   function changePlayerOmino(newColor) {\n      player.shape = choose(Const.ominoShapes);\n      player.ominocolor = newColor;\n      loadPlayerOmino();\n   }\n\n   function getOminoSprite(shape, color) {\n      return `omino_${shape}_${color}`;\n   }\n\n   function getPlayerCells(player) {\n      player.cells = Omino.getCellPos(player.omino, player.angle, Const.cellSize);\n   }\n\n   function updatePlayerSprite(spriteName) {\n      player.use(sprite(spriteName));\n      player.use(area());\n   }\n\n   function loadPlayerOmino() {\n      let shape = player.shape;\n      let color = player.ominocolor;\n      let spriteName = getOminoSprite(shape, color);\n\n      updatePlayerSprite(spriteName);\n      player.omino = Omino.Shapes[shape];\n      getPlayerCells(player);\n   }\n\n   const player = add([\n            sprite(getOminoSprite(Const.playerStartShape, Const.playerStartColor)),\n            pos(Const.mapW / 2, Const.mapH / 2),\n            z(99),\n            area(),\n            solid(),\n            rotate(Const.playerStartAngle),\n            origin(\"center\"),\n            health(Const.playerMaxLife),\n            \"player\", {\n               level: Const.playerStartLevel || 0,\n               score: Const.playerStartScore || 0,\n               shootDelay: 0.8,\n               shootTimer: 0,\n               speed: Const.playerStartSpeed,\n               gems: 0,\n               gemsLimit: 10,\n               shape: Const.playerStartShape,\n               ominocolor: Const.playerStartColor,\n               touchDamage: 'veryhigh',\n            }\n         ]);\n\tconsole.log(player);\n   player.shootDelay *= Math.pow(Const.playerShootLevelMultiplier, player.level);\n\n   loadPlayerOmino();\n\n   function playerMoveLeft() {\n      // move left\n      player.move(Math.min(-player.speed / 2, Math.cos(math.d2r(player.angle)) * player.speed), 0);\n      if (player.pos.x < 0) {\n         player.pos.x = 0;\n      }\n   }\n\n   function playerMoveRight() {\n      // move right\n      player.move(Math.max(player.speed / 2, Math.cos(math.d2r(-player.angle)) * player.speed), 0);\n      if (player.pos.x > Const.mapW) {\n         player.pos.x = Const.mapW;\n      }\n   }\n\n   function playerMoveUp() {\n      player.move(0, Math.min(-player.speed / 2, Math.sin(math.d2r(player.angle)) * player.speed));\n      if (player.pos.y < 0) {\n         player.pos.y = 0;\n      }\n   }\n\n   function playerMoveDown() {\n      player.move(0, Math.max(player.speed / 2, Math.sin(math.d2r(-player.angle - 180)) * player.speed));\n      if (player.pos.y > Const.mapH) {\n         player.pos.y = Const.mapH;\n      }\n   }\n\n   function playerTurnLeft() {\n      player.angle -= Const.playerAngleTurn;\n      getPlayerCells(player);\n   };\n\n   function playerTurnRight() {\n      player.angle += Const.playerAngleTurn;\n      getPlayerCells(player);\n   };\n\n   // BEAKL\n   onKeyDown(\"i\", playerMoveLeft);\n\n   onKeyDown(\"a\", playerMoveRight);\n\n   onKeyDown(\"o\", playerMoveUp);\n\n   onKeyDown(\"e\", playerMoveDown);\n\n   onKeyPress(\"s\", playerTurnLeft);\n\n   onKeyPress(\"t\", playerTurnRight);\n\n   // SHITTY\n   onKeyDown(\"x\", playerMoveLeft);\n\n   onKeyDown(\"v\", playerMoveRight);\n\n   onKeyDown(\"d\", playerMoveUp);\n\n   onKeyDown(\"c\", playerMoveDown);\n\n   onKeyPress(\",\", playerTurnLeft);\n\n   onKeyPress(\".\", playerTurnRight);\n\n   const BULLET_SPEED = Const.blockSize * 5;\n   const LASER_SPEED = Const.blockSize * 8;\n   const MISSILE_SPEED = Const.blockSize * 6;\n   const SEEKER_SPEED = Const.blockSize * 8;\n   const FALLING_SPEED = Const.blockSize * 10;\n   const EXHAUST_SPEED = Const.blockSize;\n   const LASER_H = 2;\n\n   function spawnPlayerExhaust(cells) {\n      // particles behind player, to denote movement direction\n      // moves in opposite direction of player\n      let angle = player.angle + 180;\n\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x + Math.cos(math.d2r(angle)) * 12 * player.omino.cols / 2;\n         let y = player.pos.y + cell.y + Math.sin(math.d2r(angle)) * 12 * player.omino.rows / 2;\n         const ob = add([\n                  pos(x, y),\n                  rect(1, 1),\n                  scale(3),\n                  color(0, 255, 255),\n                  rotate(angle),\n                  opacity(1),\n                  lifespan(0.25),\n                  move(angle, rand(EXHAUST_SPEED)),\n                  \"exhaust\", {}\n               ]);\n      });\n   }\n\n   player.onUpdate(() => {\n      let deltaTime = dt();\n      player.shootTimer += deltaTime;\n      player.shapeChangeTimer += deltaTime;\n      if (player.shootTimer >= player.shootDelay) {\n         if (player.cells) {\n            playerShootsLogic(player.cells);\n         }\n\n         player.shootTimer = 0;\n      }\n\n      spawnPlayerExhaust(player.cells);\n   });\n\n   onUpdate(\"exhaust\", (ob) => {\n      // fade out\n      ob.use(opacity(ob.opacity * 0.9));\n   });\n\n   function playerShootsLogic(cells) {\n      switch (player.ominocolor) {\n      case 'cyan':\n         playerShootsLasers(cells);\n         break;\n\n      case 'yellow':\n         playerShootsMissiles();\n         break;\n\n      case 'magenta':\n         playerShootsField(cells);\n         break;\n\n      case 'green':\n         playerShootsBouncer(cells);\n         break;\n\n      case 'white':\n         playerShootsFalling();\n         break;\n\n      case 'blue':\n         playerShootsSeekers(cells);\n         break;\n\n      case 'red':\n      default:\n         playerShootsBullets(cells);\n         break;\n      }\n   }\n\n   function playerShootsBullets(cells) {\n      let angles = [-45, 45];\n      cells.forEach((cell, i) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n         let spot = vec2(x, y);\n         spawnBullet(spot, 0);\n      });\n      for (let i = 0; i < 2; i++) {\n         let x = player.pos.x;\n         let y = player.pos.y;\n         let spot = vec2(x, y);\n         spawnBullet(spot, angles[i]);\n      }\n   }\n\n   function spawnBullet(spot, angle) {\n      let radius = 2 + player.level;\n      let diameter = 2 * radius;\n      add([\n            pos(spot),\n            circle(radius),\n            origin(\"center\"),\n            color(255, 0, 255),\n            area({\n               width: diameter,\n               height: diameter,\n            }),\n            z(-3),\n            cleanup(),\n            move(player.angle + angle, BULLET_SPEED * Math.pow(1.1, player.level)),\n            \"playerattack\",\n            \"bullet\", {\n               damage: 'low',\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   function playerShootsLasers(cells) {\n      // one laser from center, always\n      // extra lasers per player level\n      let getSpot = (cell, dy) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n         dy = dy || 0;\n         let spot = math.rotatePoint({\n               x: x,\n               y: y\n            }, player.angle, {\n               x: x - Const.blockSize, // distance away from player\n               y: y + dy, // offset from first lasers\n            });\n         spawnLaser(spot, 0);\n         spawnLaser(spot, 180);\n      }\n      getSpot({\n         x: 0,\n         y: 0\n      });\n      let levelGap = 2; // gain 1 laser per levelGap\n      let nLasers = Math.ceil((player.level + 1) / levelGap);\n      for (let i = 0; i < nLasers; i++) {\n         let cell = cells[i % cells.length];\n         let dy = Math.floor(i / cells.length) * (i % 2 ? 1 : -1) * LASER_H;\n         getSpot(cell, dy);\n      }\n\n      //cells.forEach((cell) => getSpot(cell));\n   }\n\n   function spawnLaser(spot, angle) {\n      let laser = add([\n               pos(spot.x, spot.y),\n               rect(Const.blockSize * 2 + player.level, LASER_H),\n               rotate(player.angle),\n               color(0, 255, 255),\n               area(),\n               z(-3),\n               cleanup(),\n               move(player.angle + angle, LASER_SPEED),\n               \"playerattack\",\n               \"laser\", {\n                  damage: 'low',\n               }\n            ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   function playerShootsMissiles() {\n      let x = player.pos.x;\n      let y = player.pos.y;\n      let pos = vec2(x, y);\n      spawnMissile(pos);\n   }\n\n   function spawnMissile(spot) {\n      add([\n            pos(spot),\n            sprite(getOminoSprite(player.shape, player.ominocolor)),\n            origin(\"center\"),\n            rotate(player.angle),\n            scale(0.5),\n            area(),\n            z(-3),\n            cleanup(),\n            move(player.angle, MISSILE_SPEED),\n            \"playerattack\",\n            \"missile\", {\n               damage: 'medium',\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   function spawnBomb(spot) {\n      let radius = Const.blockSize + 2 * player.level;\n      let diameter = 2 * radius;\n      add([\n            pos(spot),\n            circle(radius),\n            origin(\"center\"),\n            area({\n               width: diameter,\n               height: diameter,\n            }),\n            color(Color.YELLOW),\n            z(-3),\n            cleanup(),\n            lifespan(0.5 * Math.pow(1.1, player.level)),\n            \"playerattack\",\n            \"bomb\", {\n               damage: 'veryhigh',\n            }\n         ]);\n   }\n\n   function explodeMissile(ob) {\n      destroy(ob);\n      spawnBomb(ob.pos);\n   }\n\n   function explodeAllMissiles() {\n      every(\"missile\", (ob) => {\n         explodeMissile(ob);\n      });\n   }\n\n   function playerShootsField(cells) {\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n         let spot = vec2(x, y);\n         spawnField(spot);\n      });\n   }\n\n   function spawnField(spot) {\n      let radius = Const.blockSize * 1.5 + 3 * (player.level);\n      let diameter = 2 * radius;\n      add([\n            pos(spot),\n            circle(radius),\n            origin(\"center\"),\n            color(255, 0, 0),\n            area({\n               width: diameter,\n               height: diameter,\n            }),\n            z(-3),\n            cleanup(),\n            lifespan(0.1),\n            \"playerattack\",\n            \"field\", {\n               damage: 'veryhigh',\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   function playerShootsBouncer(cells) {\n      cells.forEach((cell) => {\n         let x = player.pos.x + cell.x;\n         let y = player.pos.y + cell.y;\n         let spot = vec2(x, y);\n         spawnBouncer(spot);\n      });\n   }\n\n   function spawnBouncer(spot) {\n      add([\n            pos(spot),\n            circle(Const.blockSize / 8),\n            origin(\"center\"),\n            color(Color.GREEN),\n            area({\n               width: Const.blockSize / 2,\n               height: Const.blockSize / 2,\n            }),\n            z(-3),\n            cleanup(),\n            lifespan(3 * Math.pow(1.1, player.level)),\n            \"playerattack\",\n            \"bouncer\", {\n               speedX: Math.cos(math.d2r(player.angle)) * BULLET_SPEED,\n               speedY: Math.sin(math.d2r(player.angle)) * BULLET_SPEED,\n               damage: 'low',\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n   onUpdate(\"bouncer\", (bouncer) => {\n      bouncer.move(bouncer.speedX, bouncer.speedY);\n      if (bouncer.pos.x < 0) {\n         bouncer.pos.x = -bouncer.pos.x * 2;\n         bouncer.speedX *= -1;\n      }\n      if (bouncer.pos.x > Const.mapW) {\n         bouncer.pos.x -= (bouncer.pos.x - Const.mapW) * 2;\n         bouncer.speedX *= -1;\n      }\n      if (bouncer.pos.y < 0) {\n         bouncer.pos.y = -bouncer.pos.y * 2;\n         bouncer.speedY *= -1;\n      }\n      if (bouncer.pos.y > Const.mapH) {\n         bouncer.pos.y -= (bouncer.pos.y - Const.mapH) * 2;\n         bouncer.speedY *= -1;\n      }\n   });\n\n   function playerShootsFalling() {\n      // pieces appear from all sides of screen at player pos\n      let nDirs = Const.nDirs;\n      let levelGap = 5;\n      let linesPerSide = 1 + Math.floor(player.level / levelGap);\n      let damage = 'veryhigh';\n      if (player.level >= levelGap * 3) {\n         damage = 'low';\n      } else if (player.level >= levelGap * 2) {\n         damage = 'medium';\n      } else if (player.level >= levelGap * 1) {\n         damage = 'high';\n      }\n\n      for (let line = 0; line < linesPerSide; line++) {\n         for (let i = 0; i < nDirs; i++) {\n            let dir = (i + 1) % nDirs;\n            let x = player.pos.x;\n            let y = player.pos.y;\n            let delta = Math.ceil((line) / 2) * (line % 2 ? 1 : -1) * Const.blockSize;\n            if (0 == dir % 2) {\n               // left or right\n               x = 0 == dir ? 0 : Const.mapW;\n               y += delta;\n            } else {\n               // up or down\n               y = 1 == dir ? 0 : Const.mapH;\n               x += delta;\n            }\n            let spot = vec2(x, y);\n            spawnFalling(spot, dir, damage);\n         }\n      }\n   }\n\n   function spawnFalling(spot, dir, damageLevel) {\n      let angle = 0;\n      let duration = 2;\n      if (0 == dir % 2) {\n         // move left or right\n         angle += (0 == dir ? 0 : 180);\n         duration = Const.mapW / FALLING_SPEED / 2;\n      }\n      if (1 == dir % 2) {\n         // move up or down\n         angle += (1 == dir ? 90 : -90);\n         duration = Const.mapH / FALLING_SPEED / 2;\n      }\n      add([\n            pos(spot),\n            sprite(getOminoSprite(player.shape, choose(Const.ominoColors))),\n            origin(\"center\"),\n            rotate(player.angle),\n            opacity(0.5),\n            scale(0.5),\n            area(),\n            z(-3),\n            cleanup(),\n            lifespan(duration),\n            move(angle, FALLING_SPEED),\n            \"playerattack\",\n            \"falling\", {\n               damage: damageLevel,\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n   }\n\n\tfunction playerShootsSeekers(cells) {\n\t\t// two default seekers: ahead and behind player\n\t\t// extra seeker for each levelGap shot from cells\n\t\tlet levelGap = 3;\n\t\tlet spot = player.pos;\n\t\tlet x = player.pos.x;\n\t\tlet y = player.pos.y;\n\t\tlet distance = Const.blockSize * 2;\n\n\t\t// ahead\n\t\tspot = math.rotatePoint({\n               x: x,\n               y: y\n            }, player.angle, {\n               x: x + distance,\n               y: y,\n            });\n\t\tspawnSeeker(spot);\n\n\t\t// behind\n\t\tspot = math.rotatePoint({\n               x: x,\n               y: y\n            }, player.angle, {\n               x: x - distance,\n               y: y,\n            });\n\t\tspawnSeeker(spot);\n\n\t\tlet nSeekers = Math.floor((player.level + 1)/levelGap) + 1;\n\t\tlog(nSeekers);\n\t\tlet ahead = [0, 3];\n\t\tfor (let i=0; i < nSeekers; i++) {\n\t\t\tlet cell = cells[i % cells.length];\n\t\t\tx = player.pos.x + cell.x;\n\t\t\ty = player.pos.y + cell.y;\n\t\t\tlet dx = ahead.includes(i) ? distance : -distance;\n\t\t\tdx *= i >= cells.length ? -1 : 1;\n\t\t\tspot = math.rotatePoint({\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t}, player.angle, {\n\t\t\t\tx: x + dx,\n\t\t\t\ty: y,\n\t\t\t});\n\t\t\tspawnSeeker(spot);\n\t\t}\n\t}\n\n\tfunction spawnSeeker(spot) {\n      let seeker = add([\n            pos(spot.x, spot.y),\n            sprite(\"omino_seeker\"),\n            origin(\"center\"),\n\t\t\t\trotate(player.angle),\n            scale(0.125),\n            area(),\n            z(-3),\n            cleanup(),\n\t\t\t\tlifespan(3),\n            \"playerattack\",\n            \"seeker\", {\n               damage: 'low',\n\t\t\t\t\tnextTarget: null,\n\t\t\t\t\tspeed: SEEKER_SPEED * (1 + player.level / 100),\n            }\n         ]);\n\n      play(\"shoot\", {\n         volume: 0.0125,\n         detune: rand(-1200, 1200),\n      });\n\t}\n\n\tonUpdate(\"seeker\", (ob) => {\n\t\tif (ob.nextTarget == null || !ob.nextTarget.exists()) {\n\t\t\tseekerFindTarget(ob);\n\t\t}\n\t\tif (ob.nextTarget != null) {\n\t\t\tob.angle = ob.pos.angle(ob.nextTarget.pos) - 90;\n\t\t\tob.moveTo(ob.nextTarget.pos, ob.speed);\n\t\t}\n\t});\n\n\tfunction seekerFindTarget(seeker) {\n\t\t// find nearest alien\n\t\tlet enemies = get(\"alien\").map((alien) => {\n\t\t\treturn {dist: alien.pos.dist(seeker.pos), target: alien};\n\t\t});\n\t\tenemies.sort((a, b) => {\n\t\t\treturn a.dist - b.dist;\n\t\t});\n\t\tseeker.nextTarget = enemies[0] ? enemies[0].target : null;\n\t}\n\n   function spawnAlienBullet(spot) {\n      const alien = add([\n               pos(spot),\n               circle(4),\n               origin(\"center\"),\n               color(255, 128, 0),\n               area({\n                  width: 8,\n                  height: 8\n               }),\n               z(-1),\n               cleanup(),\n               \"alienbullet\", {\n                  damage: 'medium',\n               }\n            ]);\n      alien.use(move(player.pos.angle(alien.pos), BULLET_SPEED));\n   }\n\n   player.onCollide(\"alienbullet\", (attack) => {\n      gotHurt(player, attack.damage);\n      destroy(attack);\n      makeExplosion(player.pos, 3, 3, 3, Color.YELLOW);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   function spawnAlienLaser(spot) {\n      let angle = Math.atan2(player.pos.y - spot.y, player.pos.x - spot.x);\n      let ob = add([\n               pos(spot),\n               rect(Const.blockSize * 2, 1),\n               rotate(math.r2d(angle)),\n               origin(\"center\"),\n               color(255, 128, 0),\n               area(),\n               z(-1),\n               cleanup(),\n               \"alienlaser\", {\n                  damage: 'low',\n               }\n            ]);\n      ob.use(move(player.pos.angle(ob.pos), LASER_SPEED));\n   }\n\n   player.onCollide(\"alienlaser\", (attack) => {\n      gotHurt(player, attack.damage);\n      makeExplosion(player.pos, 3, 3, 3, Color.YELLOW);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   const ALIEN_BASE_SPEED = 100;\n   const ALIEN_SPEED_INC = 20;\n   const POINTS_ALIEN_STRONGER = 1000;\n\n   function spawnAlienSpider() {\n      let alienDirection = choose([Const.direction.LEFT, Const.direction.RIGHT]);\n      let xpos = (alienDirection == Const.direction.LEFT ? 0 : Const.mapW - 22);\n      const alienSpeed = ALIEN_BASE_SPEED * Math.pow(1.1, player.level);\n      const newAlienInterval = 2.0 * Math.pow(0.9, player.level);\n      let angle = alienDirection == Const.direction.LEFT ? rand(45, -45) : rand(-135, -225);\n\n      add([\n            sprite(\"spider\"),\n            pos(xpos, rand(0, Const.mapH - 30)),\n            area(),\n            origin(\"center\"),\n            rotate(angle + 90),\n            cleanup(),\n            health(8),\n            move(angle, alienSpeed),\n            \"spider\",\n            \"alien\", {\n               shootChance: 0.001 + (0.0001 * player.level),\n               touchDamage: 'high',\n               bulletDamage: 'medium',\n               points: 10,\n            },\n         ]);\n\n      wait(newAlienInterval, spawnAlienSpider);\n   }\n\n   spawnAlienSpider();\n\n   function spawnAlienWasp() {\n      // wasp chance to appear at all corners at once\n      let spawnChance = 0.6;\n      for (let i = 4; i; i--) {\n         if (!chance(spawnChance)) {\n            continue;\n         }\n         let xpos = 0 == i % 2 ? 0 : Const.mapW;\n         let ypos = 2 >= i ? 0 : Const.mapH;\n         let angle = xpos == Const.mapW ? 135 : 45;\n         angle *= ypos == Const.mapH ? -1 : 1;\n         add([\n               sprite(\"wasp\"),\n               pos(xpos, ypos),\n               area(),\n               origin(\"center\"),\n               rotate(angle),\n               cleanup(),\n               health(24),\n               \"wasp\",\n               \"alien\", {\n                  shootChance: 0.005 + (0.001 * player.level),\n                  touchDamage: 'veryhigh',\n                  bulletDamage: 'high',\n                  points: 20,\n                  speed: ALIEN_BASE_SPEED, // wavelength\n                  amplitude: 3, // delta pixels\n                  frequency: 45, // times / seconds\n                  timer: 0,\n               },\n            ]);\n      }\n\n      wait(rand(12, 18), spawnAlienWasp);\n   }\n\n   wait(rand(6, 12), spawnAlienWasp);\n\n   onUpdate(\"wasp\", (wasp) => {\n      // move like sine wave\n      wasp.timer += dt();\n      let cos = Math.cos(math.d2r(wasp.angle));\n      let sin = Math.sin(math.d2r(wasp.angle));\n      let wobble = wasp.amplitude * Math.cos(wasp.frequency * wasp.timer) * wasp.frequency;\n      let dx = cos * wasp.speed - sin * wobble;\n      let dy = sin * wasp.speed + cos * wobble;\n      wasp.move(dx, dy);\n   });\n\n   const CHANCE_SPAWN_ALIENSHOOTER = 0.001 * Math.pow(1.1, player.level);\n\n   function spawnAlienShooters() {\n      // create 3 enemies from left or right edges\n      // V formation, shooting lasers\n      let alienDirection = choose([Const.direction.LEFT, Const.direction.RIGHT]);\n      let spriteSize = 40;\n      let xpos = [\n         (alienDirection == Const.direction.LEFT ? -spriteSize / 2 : Const.mapW + spriteSize / 2),\n         (alienDirection == Const.direction.LEFT ? 0 : Const.mapW),\n         (alienDirection == Const.direction.LEFT ? -spriteSize / 2 : Const.mapW + spriteSize / 2),\n      ];\n      let ypos = rand(spriteSize, Const.mapH - spriteSize * 3);\n\n      let angle = alienDirection == Const.direction.LEFT ? 0 : 180;\n\n      for (let i = 0; i < 3; i++) {\n         add([\n               sprite(\"spaceship\"),\n               pos(xpos[i], ypos + i * spriteSize),\n               area(),\n               origin(\"center\"),\n               rotate(angle),\n               cleanup(),\n               health(24),\n               move(angle, spriteSize),\n               \"alienshooter\",\n               \"alien\", {\n                  shootChance: 0.005 + (0.0005 * player.level),\n                  touchDamage: 'veryhigh',\n                  points: 30,\n               },\n            ]);\n      }\n   }\n\n   onUpdate(\"alienshooter\", (alien) => {\n      if (chance(alien.shootChance)) {\n         spawnAlienLaser(alien.pos);\n      }\n   });\n\n   const CHANCE_ELITE_SPAWN_UP = 0.5;\n\n   function spawnAlienElite() {\n      let bUp = chance(CHANCE_ELITE_SPAWN_UP);\n      let theSprite = sprite(\"gaia\");\n      let w = theSprite.width;\n      let h = theSprite.height;\n      let y = bUp ? 0 : Const.mapH;\n      let x = rand(w / 2, Const.mapW - w / 2);\n      let angle = bUp ? 90 : -90;\n      add([\n            theSprite,\n            pos(x, y),\n            area(),\n            origin(\"center\"),\n            cleanup(),\n            health(120 * Math.pow(1.1, player.level)),\n            move(angle, Const.blockSize / 2),\n            \"elite\",\n            \"alien\", {\n               shootChance: 0.0125 + (0.005 * player.level),\n               touchDamage: 'extreme',\n               bulletDamage: 'medium',\n               points: 240,\n            },\n         ]);\n   }\n\n   wait(rand(10, 16), spawnAlienElite);\n   //wait(rand(0, 0), spawnAlienElite);\n\n   onUpdate(\"alien\", (alien) => {\n      if (alien.bulletDamage && chance(alien.shootChance)) {\n         spawnAlienBullet(alien.pos);\n      }\n   });\n\n   onCollide(\"alien\", \"bullet\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      destroy(attacker);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"laser\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"missile\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      explodeAllMissiles();\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"bomb\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.YELLOW);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"field\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"bouncer\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.CYAN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n   });\n\n   onCollide(\"alien\", \"falling\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n      destroy(attacker);\n   });\n\n   onCollide(\"alien\", \"seeker\", (alien, attacker) => {\n      makeExplosion(math.midpoint(alien.pos, attacker.pos), 3, 3, 3, Color.GREEN);\n      gotHurt(alien, attacker.damage);\n      play(\"explosion\", {\n         volume: 0.0375,\n         detune: rand(0, 1200),\n      });\n      destroy(attacker);\n   });\n\n   on(\"hurt\", \"alien\", (alien) => {\n      if (alien.hp() <= 0) {\n         updateScore(alien.points);\n         destroy(alien);\n      }\n   });\n\n   on(\"destroy\", \"elite\", (alien) => {\n      wait(rand(12, 24), spawnAlienElite);\n   });\n\n   add([\n         text(\"SCORE: \", {\n            size: 8,\n            font: \"sink\"\n         }),\n         pos(24, 10),\n         layer(\"ui\"),\n      ]);\n\n   const scoreText = add([\n            text(\"000000\", {\n               size: 8,\n               font: \"sink\"\n            }),\n            pos(72, 10),\n            layer(\"ui\"),\n         ]);\n\n   function updatePlayerLevel() {\n      if (20 >= Const.playerMaxLevel && player.level < Math.floor(player.score / 1000)) {\n         player.level++;\n         player.shootDelay *= Const.playerShootLevelMultiplier;\n      }\n   }\n\n   function updateScore(points) {\n      player.score += points;\n      scoreText.text = player.score.toString().padStart(6, 0);\n      play(\"score\", {\n         volume: 0.05,\n         detune: rand(-1200, 1000),\n      });\n\n      updatePlayerLevel();\n   }\n\n   add([\n         text(\"SHIELD\", {\n            size: 8,\n            font: \"sink\"\n         }),\n         pos(174, 10),\n         layer(\"ui\"),\n      ]);\n\n   // health bar border\n   add([\n         rect(54, 14),\n         pos(214, 6),\n         color(100, 100, 100),\n         layer(\"ui\"),\n      ]);\n\n   // health bar background\n   add([\n         rect(50, 10),\n         pos(216, 8),\n         color(0, 0, 0),\n         layer(\"ui\"),\n      ]);\n\n   // health bar filling\n   const healthBar = add([\n            rect(50, 10),\n            pos(216, 8),\n            color(0, 255, 0),\n            layer(\"ui\"),\n         ]);\n\n   function updatePlayerHealth() {\n      player.setHP(Math.max(player.hp(), 0));\n      player.setHP(Math.min(player.hp(), Const.playerMaxLife));\n\n      healthBar.width = 50 * (player.hp() / Const.playerMaxLife);\n\n      if (player.hp() <= 0.25 * Const.playerMaxLife) {\n         healthBar.color = rgb(255, 0, 0);\n      } else if (player.hp() <= 0.50 * Const.playerMaxLife) {\n         healthBar.color = rgb(255, 127, 0);\n      } else if (player.hp() < Const.playerMaxLife) {\n         healthBar.color = rgb(255, 255, 0);\n      } else {\n         healthBar.color = rgb(0, 255, 0);\n      }\n\n      if (player.hp() <= 0) {\n         destroy(player);\n         for (let i = 0; i < 500; i++) {\n            wait(0.01 * i, () => {\n               makeExplosion(vec2(rand(0, Const.mapW), rand(0, Const.mapH)), 5, 5, 5, Color.RED);\n               play(\"explosion\", {\n                  volume: 0.125,\n                  detune: rand(-1200, 1200)\n               });\n            });\n         }\n         wait(2, () => {\n            music.stop();\n            go(\"endGame\", player.score);\n         });\n      }\n   }\n\n   player.onHurt(() => {\n      shake(7);\n      updatePlayerHealth();\n   });\n   player.onHeal(updatePlayerHealth);\n\n   player.onCollide(\"alien\", (alien) => {\n      shake(5);\n      makeExplosion(alien.pos, 4, 4, 4, Color.RED);\n      play(\"explosion\", {\n         detune: -1200,\n         volume: 0.0375,\n      });\n      gotHurt(player, alien.touchDamage);\n      gotHurt(alien, player.touchDamage);\n   });\n\n   function spawnGem() {\n      let xpos = rand(Const.blockSize, Const.mapW - Const.blockSize);\n      let newColor = choose(Const.ominoColors);\n\t\t// debug\n\t\t//newColor = 'blue';\n      add([\n            sprite(`omino_plus_${newColor}`),\n            pos(rand(Const.blockSize, Const.mapW - Const.blockSize), rand(Const.blockSize, Const.mapH - Const.blockSize)),\n            area(),\n            scale(0.25),\n            rotate(0),\n            origin(\"center\"),\n            opacity(1),\n            \"gem\", {\n               spawnDelay: () => {\n                  return rand(2, 6);\n               },\n               points: 100,\n               lifeGain: 'medium',\n               newColor: newColor,\n            },\n         ]);\n   }\n\n   //wait(rand(2, 6), spawnGem);\n   //wait(rand(2, 6), spawnGem);\n\tspawnGem();\n\tspawnGem();\n\n   onUpdate(\"gem\", (gem) => {\n      gem.angle += 2;\n      // fade in and out?\n      gem.use(opacity(Math.sin((gem.angle / 45) % Math.PI) + 0.38));\n   });\n\n   player.onCollide(\"gem\", (gem) => {\n      let newColor = gem.newColor;\n      destroy(gem);\n      updateScore(gem.points);\n      player.heal(Const.damageLevel[gem.lifeGain]);\n      wait(gem.spawnDelay(), spawnGem);\n      playerGemsBoost();\n      changePlayerOmino(newColor);\n   });\n\n   function playerGemsBoost() {\n      player.gems++;\n      if (player.gems >= player.gemsLimit && Const.playerMaxSpeed >= player.speed) {\n         player.speed += ALIEN_SPEED_INC;\n         player.gems = 0;\n      }\n   }\n\n   // random obstacles, of random size and speed\n   const CHANCE_SPAWN_OBSTACLES = 0.0005 * Math.pow(1.05, player.level);\n   const MAX_OBSTACLES_W = 5;\n   const MAX_OBSTACLES_H = 3;\n\n   function spawnObstacles() {\n      let x = rand(Const.mapW - Const.blockSize * MAX_OBSTACLES_W);\n      for (let i = MAX_OBSTACLES_W; i; i--) {\n         for (let j = MAX_OBSTACLES_H; j; j--) {\n            if (!chance(0.33)) {\n               continue;\n            }\n            add([\n                  sprite(\"asteroid\"),\n                  pos(x + i * Const.blockSize, -j * Const.blockSize),\n                  origin(\"center\"),\n                  area(),\n                  health(24),\n                  move(90, Const.blockSize / 2),\n                  \"obstacle\", {\n                     touchDamage: 'medium',\n                     points: 2,\n                  }\n               ]);\n         }\n      }\n   }\n\n   onUpdate(() => {\n      if (chance(CHANCE_SPAWN_OBSTACLES)) {\n         spawnObstacles();\n      }\n      if (!get(\"alienshooter\").length && chance(CHANCE_SPAWN_ALIENSHOOTER)) {\n         spawnAlienShooters();\n      }\n   });\n\n   onUpdate(\"obstacle\", (ob) => {\n      if (ob.pos.y > Const.mapH) {\n         destroy(ob);\n      }\n   });\n\n   player.onCollide(\"obstacle\", (ob) => {\n      gotHurt(player, ob.touchDamage);\n      gotHurt(ob, ob.touchDamage);\n      makeExplosion(math.midpoint(ob.pos, player.pos), 4, 4, 4, Color.RED);\n      play(\"explosion\", {\n         detune: -1200,\n         volume: 0.0375,\n      });\n   });\n\n   onCollide(\"obstacle\", \"playerattack\", (ob, attack) => {\n      gotHurt(ob, attack.damage);\n      if (attack.is('missile')) {\n         explodeAllMissiles();\n      }\n      if (attack.is('bullet')) {\n         destroy(attack);\n      }\n   });\n\n   on(\"hurt\", \"obstacle\", (ob) => {\n      if (0 >= ob.hp()) {\n         destroy(ob);\n         updateScore(ob.points);\n      }\n   });\n\n   function makeExplosion(p, n, rad, size, colour = Color.YELLOW) {\n      for (let i = 0; i < n; i++) {\n         wait(rand(n * 0.1), () => {\n            for (let i = 0; i < 2; i++) {\n               add([\n                     pos(p.add(rand(vec2(-rad), vec2(rad)))),\n                     circle(1, 1),\n                     color(colour),\n                     outline({\n                        width: size / 2,\n                        color: Color.BLACK\n                     }),\n                     origin(\"center\"),\n                     scale(1, 1),\n                     grow(rand(48, 72) * size),\n                     lifespan(0.1),\n                  ]);\n            }\n         });\n      }\n   }\n\n   function grow(rate) {\n      return {\n         update() {\n            const n = rate * dt();\n            this.scale.x += n;\n            this.scale.y += n;\n         },\n      };\n   }\n}\n\nexport {\n   runScene\n}\n", "import Const from \"./const.js\"\nimport * as scene_title from \"./scene_title.js\"\n\nfunction runScene(score) {\n   scene_title.createTitle();\n\tsetTimeout(scene_title.animateTitle, 1000, 2);\n\n   add([\n         text(\"GAME OVER\", {\n            size: 40,\n            font: \"sink\"\n         }),\n         pos(Const.mapW / 2, Const.mapH * 5 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\" SCORE:\\n\" + score, {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(Const.mapW / 2, Const.mapH * 7 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   add([\n         text(\"Press ENTER to start\", {\n            size: 20,\n            font: \"sink\"\n         }),\n         pos(Const.mapW / 2, Const.mapH * 10 / 12),\n         origin(\"center\"),\n         layer(\"ui\")\n      ]);\n\n   onKeyRelease(\"enter\", () => {\n      go(\"main\");\n   });\n}\n\nexport {runScene}", "/*\nTetraShmup\n\n- shmup where player is tetrominos\n\nhosted @ https://replit.com/@Amuseum/TetraShmup#code/main.js\nplayed @ https://TetraShmup.amuseum.repl.co\n\nCredits:\n= Game Designer = AMuseum = Xay Voong\n= Music BY OBLIDIVM http://oblidivmmusic.blogspot.com.es/\n= Elite art by antifarea\n= Arts and music found at opengameart.org, replit.com\n//*/\n\nimport Const from \"./const.js\"\nimport Omino from \"./omino.js\"\nimport * as scene_title from \"./scene_title.js\"\nimport * as scene_main from \"./scene_main.js\"\nimport * as scene_gameover from \"./scene_gameover.js\"\n\n// initialize context\nkaboom({\n   background: [0, 0, 0],\n   width: 360,\n   height: 480,\n   scale: 1.5,\n});\n\n// hide cursor\nfor (const c of document.getElementsByTagName('canvas')) {\n\tc.style.cursor = \"none\";\n}\n\n// load resources\nconst LOAD_SPRITES = [\n\t\"stars\",\n\t\"gem\",\n\t\"spider\",\n\t\"wasp\",\n\t\"spaceship\",\n\t\"gaia\",\n\t\"asteroid\",\n\t\"omino_seeker\",\n];\n\nconst LOAD_WAVS = [\n\t\"shoot\",\n\t\"explosion\",\n\t\"score\",\n];\n\nconst LOAD_OGGS = [\n\t\"alone_against_enemy\",\n\t\"brave_pilots\",\n\t\"epic_end\",\n\t\"rain_of_lasers\",\n\t\"without_fear\",\n];\n\nconst LOAD_MP3S = [\n];\n\nfunction loadOminos() {\n\tlet shapes = [...Const.ominoShapes, 'plus'];\n\tshapes.forEach((shape) => {\n      Const.ominoColors.forEach((color) => {\n         loadSprite(`omino_${shape}_${color}`, `omino_${shape}_${color}.png`);\n      });\n   });\n}\n\nfunction loadSprites() {\n\tfor (const ob of LOAD_SPRITES) {\n\t\tloadSprite(ob, `${ob}.png`);\n\t}\n}\n\nfunction loadWavs() {\n\tfor (const ob of LOAD_WAVS) {\n\t\tloadSound(ob, `${ob}.wav`);\n\t}\n}\n\nfunction loadOggs() {\n\tfor (const ob of LOAD_OGGS) {\n\t\tloadSound(ob, `${ob}.ogg`);\n\t}\n}\n\nfunction loadMp3s() {\n\tfor (const ob of LOAD_MP3S) {\n\t\tloadSound(ob, `${ob}.mp3`);\n\t}\n}\n\nfunction loadSounds() {\n\tloadWavs();\n\tloadOggs();\n\tloadMp3s();\n}\n\nloadRoot(\"sprites/\");\nloadSprites();\nloadOminos();\n\nloadRoot(\"sounds/\");\nloadSounds();\n\n// define scenes\nscene(\"main\", scene_main.runScene);\nscene(\"title\", scene_title.runScene);\nscene(\"endGame\", scene_gameover.runScene);\n\n// Start Game\ngo(\"title\");\n"],
  "mappings": "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",
  "names": ["choose", "on", "runScene", "color", "player", "pos", "i", "runScene", "color", "runScene"]
}
